#!/usr/bin/env bash
set -e

# Personal settings.
if [ -r "$HOME/.moodle-compose.env" ]; then
    . $HOME/.moodle-compose.env
fi

# Moodle instance settings
if [ -r "$MOODLE_DOCKER_WWWROOT/projectinfo.yml" ]; then
    MOODLE_CODENAME=$(grep -e  '^codename' "$MOODLE_DOCKER_WWWROOT/projectinfo.yml" | awk -F ': ' '{print $2}')
fi

FILE_PLUGINS="plugins.txt"
# Check that we have a plugin list to check
if [ ! -f $FILE_PLUGINS ]; then
  echo-red "No $FILE_PLUGINS file found in $(pwd)."
  exit 0
fi


FILE_CHECKS="checks.txt"
# Check that we have a list of check to run
if [ ! -f $FILE_CHECKS ]; then
  echo-red "No $FILE_CHECKS file found in $(pwd)."
  exit 0
fi


function join_by {
  local IFS="$1"; shift; echo "$*";
}


lower_case()
{
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

get_docker_webserver_name()
{
docker ps --filter "label=com.docker.compose.service=webserver" --filter "label=com.docker.compose.project=$(lower_case $MOODLE_CODENAME)" --format '{{.Names}}'
}

# Console colors
red='\033[0;91m'
red_bg='\033[101m'
yellow_bg='\033[43m'
lightmagenta_bg='\033[0;105m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[0;33m'
yellow_bold='\033[1;33m'
blue='\033[0;34m'
lime='\033[0;92m'
acqua='\033[0;96m'
magenta='\033[0;35m'
lightmagenta='\033[0;95m'
NC='\033[0m'

echo-red ()      { echo -e "${red}$1${NC}"; }
echo-green ()    { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow ()   { echo -e "${yellow}$1${NC}"; }

# Nasty portable way to the directory of this script, following symlink,
# because readlink -f not on OSX. Thanks stack overflow..
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
basedir="$( cd -P "$( dirname "$SOURCE" )/../" && pwd )"

MOODLE_CI_DIR=${MOODLE_CI_DIR:=$basedir/moodle-ci}
MOODLE_CI_REMOTE_DIR=${MOODLE_CI_REMOTE_DIR:=/tmp}
MOODLE_CI_INTERNAL_DIR=$MOODLE_CI_REMOTE_DIR/moodle-plugin-ci


function moodle_plugin_ci
{
  moodle-compose exec -T webserver bash -lc "${MOODLE_CI_INTERNAL_DIR}/moodle-ci/bin/moodle-plugin-ci $*"
}


MOODLE_CI_REPO_URL=${MOODLE_CI_REPO_URL:=https://github.com/ragusa87/moodle-plugin-ci}
MOODLE_CI_REPO_BRANCH=${MOODLE_CI_REPO_BRANCH:=localmdl}
NVM_VERSION=${NVM_VERSION:=v8.16.1}
DOCKER_WEBSERVER_NAME=$(get_docker_webserver_name)

SKIP_SETUP=${SKIP_SETUP:=0}
if [ $SKIP_SETUP -eq 0 ]; then
  # Clone Moodle-plugin-ci locally
  if [ -d  $MOODLE_CI_DIR/.git ]; then
    CURRENT=$(pwd)
    cd $MOODLE_CI_DIR
    git remote set-url origin $MOODLE_CI_REPO_URL
    git fetch
    git checkout $MOODLE_CI_REPO_BRANCH
    git reset --hard origin/$MOODLE_CI_REPO_BRANCH
    cd $CURRENT
  else
    mkdir -p $MOODLE_CI_DIR
    git clone --single-branch --branch $MOODLE_CI_REPO_BRANCH $MOODLE_CI_REPO_URL $MOODLE_CI_DIR
  fi

  # Copy Moodle-plugin-ci into docker
  ./bin/moodle-compose exec webserver mkdir -p $MOODLE_CI_INTERNAL_DIR
  docker cp $MOODLE_CI_DIR $DOCKER_WEBSERVER_NAME:$MOODLE_CI_INTERNAL_DIR/

  # Install git (TODO Move this in the dockerfile)
  docker exec $DOCKER_WEBSERVER_NAME bash -c "(! [ -x \"\$(command -v git)\" ] && (apt-get update && apt-get install -y git)) || true"
  # Install NPM >=8.9.0 <9.0.0 (TODO Move this in the dockerfile)
  docker exec $DOCKER_WEBSERVER_NAME bash -c "(! [ -d ~/.nvm ] && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash) || true"
  docker exec $DOCKER_WEBSERVER_NAME bash -lc "nvm install $NVM_VERSION && nvm use $NVM_VERSION"

  # Install composer globally (TODO Move this in the dockerfile)
  docker exec $DOCKER_WEBSERVER_NAME mkdir -p "$MOODLE_CI_INTERNAL_DIR/moodle-ci/"
  docker exec -w $MOODLE_CI_INTERNAL_DIR/moodle-ci/ $DOCKER_WEBSERVER_NAME  bash -c "(! [ -x \"\$(command -v composer)\" ] && curl -Ss https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer) || true"
  docker exec -w $MOODLE_CI_INTERNAL_DIR/moodle-ci/ $DOCKER_WEBSERVER_NAME bash -lc "composer install"
fi

# Write the list of plugin to "install" for Moodle-plugin-ci
EXTRA_PLUGINS=$MOODLE_CI_INTERNAL_DIR/moodle-ci/plugins/
moodle-compose exec webserver mkdir -p $EXTRA_PLUGINS
docker cp plugins.txt $DOCKER_WEBSERVER_NAME:$EXTRA_PLUGINS
MOODLE_DIR=/var/www/html

if [ $SKIP_SETUP -eq 0 ]; then
  # Erase the previous DB
  moodle-compose exec webserver php admin/tool/phpunit/cli/util.php  --drop 2>&1 1>/dev/null || true
  moodle-compose exec webserver php admin/tool/behat/cli/util_single_run.php  --drop 2>&1 1>/dev/null || true

  # Run the setup
  moodle_plugin_ci install \
      --db-create-skip \
      --db-pass=moodle \
      --db-type=pgsql \
      --db-user=moodle \
      --extra-plugins $EXTRA_PLUGINS \
      --moodle $MOODLE_DIR \
      --no-clone \
      --no-config-rewrite \
      -vvv
fi

# Run the tests
EXIT_STATUS=0
PLUGINS_FOUND=0
CHECKS_DONE=0
while read -r plugin; do
    PLUGINS_FOUND=1
    echo-yellow "Checking $plugin"
    while IFS= read -r checks; do
      CHECKS_DONE=1
      moodle_plugin_ci ${checks} ${MOODLE_DIR}/${plugin}
      LOCAL_EXIT_STATUS=$?
      if [ $LOCAL_EXIT_STATUS -ne 0 ]; then
        EXIT_STATUS=$LOCAL_EXIT_STATUS
        echo-red "${checks} exited ${LOCAL_EXIT_STATUS}."
      else
        echo-green "${checks} OK"
      fi
    done < "$(pwd)/$FILE_CHECKS"
done < "$(pwd)/$FILE_PLUGINS"

if [ $CHECKS_DONE -eq 0 ]; then
  echo "No check done. Please write a list of check to do in $FILE_CHECKS in the root of your project."
  cat $FILE_CHECKS
fi

if [ $PLUGINS_FOUND -eq 0 ]; then
  echo "No plugins marked for checking. Please write a list of check to do in $FILE_PLUGINS in the root of your project."
  cat $FILE_PLUGINS
fi
exit $EXIT_STATUS